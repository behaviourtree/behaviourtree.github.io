import io
import re
import json
from pathlib import Path


def load_tree(name):
    """Parse json-file with into python dict."""
    pkgpath = Path(__file__).resolve().parent.parent
    filepath = pkgpath / "trees" / name

    print("Reading json from:\n", filepath)

    with open(filepath) as file:
        tree = json.load(file)

    print("Parsed json as:\n", tree)

    return tree

def create_file(tree, filename=None):
    if filename is None:
        filename = tree["name"] + ".py"

    pkgpath = Path(__file__).resolve().parent.parent
    filepath = pkgpath / "build" / filename

    code = generate_tree_code(tree)

    with open(filepath, 'w') as file:
        file.write(code)

    return

def generate_tree_code(tree):
    """Parse tree into a code string."""
    ostream = io.StringIO()
    indent = "    "

    ostream.write("### THIS CODE IS AUTOGENERATED AND SHOULD NOT BE MODIFIED. ###\n")
    ostream.write("\n")

    import_code = generate_import_code(tree['types'])
    ostream.write(import_code)
    ostream.write("\n")

    ostream.write(f"def {tree['name']}():\n")

    root_variable = re.sub('\W+','', tree['name']).lower()

    ostream.write(f"{indent}{root_variable} = {tree['root']['type']}(\"{tree['root']['name']}\")\n")

    for child in tree['root']['children']:
        child_code = generate_child_code(child, root_variable)
        ostream.write(child_code)

    ostream.write("\n")
    ostream.write(f"{indent}return {root_variable}\n")

    return ostream.getvalue()

def generate_import_code(types):
    ostream = io.StringIO()

    for type_name, module in types.items():
        ostream.write(f"from {module} import {type_name}\n")
    
    return ostream.getvalue()

def generate_child_code(child, parent_variable):
    ostream = io.StringIO()
    indent = "    "

    child_variable = re.sub('\W+','', child['name']).lower()

    ostream.write("\n")
    ostream.write(f"{indent}{child_variable} = {child['type']}(\"{child['name']}\")\n")
    ostream.write(f"{indent}{parent_variable}.add_child({child_variable})\n")

    if "children" in child:
        for grandchild in child['children']:
            grandchild_code = generate_child_code(grandchild, child_variable)
            ostream.write(grandchild_code)

    return ostream.getvalue()


if __name__ == "__main__":
    tree_name = "test_tree1.json"
    tree = load_tree(tree_name)
    create_file(tree)

    tree_name = "test_tree2.json"
    tree = load_tree(tree_name)
    create_file(tree)
